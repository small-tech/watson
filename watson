#!/usr/bin/env bash

######################################################################
#
# Watson version 1.0
#
# “It’s elementary, my dear…”
#
# Watson helps you set up your new elementary OS Vala app.
#
# For details, please see:
# https://github.com/small-tech/watson
#
# Follows the Community Bash Style Guide.
# https://github.com/azet/community_bash_style_guide
#
# Copyright ⓒ 2021-present Aral Balkan (https://ar.al)
# Small Technology Foundation (https://small-tech.org)
#
# Like this? Fund us!
# https://small-tech.org/fund-us
#
# Released under GNU GPL version 3.0.
#
######################################################################

# set -eu -o pipefail

show_usage() {
  echo 'Usage: watson [--dryrun|-d|--help|-h]'
}

show_error() {
  message=$1
  show_clone_instructions=$2
  if [ "$show_clone_instructions" = '--teach-how-to-use' ]; then
    show_usage
  fi
  echo ''
  printf '❌ \033[41mERROR\033[0m %s\n' "$message"
  if [ "$show_clone_instructions" = '--teach-how-to-use' ]; then
    echo ''
    echo 'To use Watson:'
    echo ''
    echo '1. Go to https://github.com/small-tech/watson'
    echo '2. Press the green “Use this template” button to create a new repository from Watson.'
    echo '3. Clone your new repository.'
    echo '4. Switch to that repository.'
    echo '5. Run ./watson'
  fi
  exit
}

show_help() {
  show_usage
  exit
}

show_validation_error() {
  show_error 'All fields are required. Please re-run Watson and try again.'
}

dryRun=false

# Get the remote URL and check if it's a git directory
gitUrl="$(git config --get remote.origin.url)" || show_error 'The current directory is not a git working copy.' --teach-how-to-use

# Get the GitHub organisation name
github_organisation_original="$(basename "$(dirname "$gitUrl")")"
# Trim git@github.com: if using SSH instead of HTTP
github_organisation_original=${github_organisation_original##*:}
# Get the app (GitHub repository) name
github_app_original="$(basename -s .git "$gitUrl")"

# Ensure the developer hasn’t accidentally cloned
# The Watson repository instead of creating their own
# using the “use this template” button on GitHub to
# create their own repository based on Watson.
if [ "${github_organisation_original}" = "small-tech" ] && [ "${github_app_original}" = "watson" ]; then
  show_error 'You currently have the original Watson repository cloned.' --teach-how-to-use
fi

dry_run() {
  dryRun=true
  echo '⧼⧼⧼⧼⧼ Dry run ⧽⧽⧽⧽⧽'
  echo ''
  echo "Carries out substitutions, presents diff, reverts changes, and exits."
}

# Apply flags, if any.
[ "$1" = '--dry-run' ] || [ "$1" = '-d' ] && dry_run
[ "$1" = '--help' ] || [ "$1" = '-h' ] && show_help

current_step=0
steps=('App Details (1/2)' 'App Details (2/2)' 'Copyright Details' 'Parse responses' 'Perform substitutions' 'Rename files' 'Configure, build, and install' 'Delete self' 'Commit and push changes' 'Exit')

# Trap errors and handle them gracefully.
#
# $1: Line number of error.
# $2: Exit code of command that failed.
handle_error() {
  printf "Step %d (%s)" $(( current_step + 1 )) "${steps[${current_step}]}"
  if (( current_step > 2 && current_step < 6 )); then
    printf " cancelled.\n"
  else
    printf ' failed on line %s.\n' "$1"
  fi
  exit "$2"
}
trap 'handle_error ${LINENO} $? ' ERR

# Constants

readonly copyright_year=$(date '+%Y')

# STEP 1: Get app details (1/2).

app_details_pipe_separated=$(zenity --forms --height=260 --title="Watson" --text="\n  <big><u>App details (1/2)</u></big>" --add-entry="Name:" --add-entry="Generic Name (e.g., Web Browser):" --add-entry="Summary/comment (purpose)" --add-entry="Description" --add-entry="Keywords (separated;by;semicolons)")

app_details_validator='^.+\|.+\|.+\|.+\|.+$'
[[ $app_details_pipe_separated =~ $app_details_validator ]] || show_validation_error

current_step=$(( current_step + 1 ))

# STEP 2: Get app details (2/2) – categories (multi-select list).

app_categories=$(zenity --list --width=400 --height=460 --multiple --separator=";" --title="Watson" --text="\n  <big><u><b>App Details (2/2)</b></u></big>\n\n  <i>You may select more than one.\n</i>" --column="Category" "AudioVideo" "Audio" "Video" "Development" "Education" "Game" "Graphics" "Network" "Office" "Science" "Settings" "System" "Utility")

app_categories_validator='^.+$'
[[ $app_categories =~ $app_categories_validator ]] || show_validation_error

current_step=$(( current_step + 1 ))

# STEP 3: Get copyright details.

copyright_details_pipe_separated=$(zenity --forms --width=300 --title="Watson" --text="\n  <big><u>Copyright Details</u></big>  \n\n  <i>Copyright ⓒ ${copyright_year}-present <big>‹Name›</big> <big>‹Email›</big></i>\n" --add-entry="Name" --add-entry="Email")

copyright_details_validator='^.+\|.+$'
[[ $copyright_details_pipe_separated =~ $copyright_details_validator ]] || show_validation_error

current_step=$(( current_step + 1 ))

# STEP 4: Parse responses.

# Parse the pipe-separated results returned from the Zenity dialogues into bash arrays.
IFS='|' read -ra app_details <<< "${app_details_pipe_separated}"
IFS='|' read -ra copyright_details <<< "${copyright_details_pipe_separated}"

# We replace any dashes in the desktop entry names with underscores for
# compatibility with D-Bus names. See:
# https://specifications.freedesktop.org/desktop-entry-spec/latest/ar01s02.html
#
# TODO: Also handle edge case of names that begin with numbers? (Prefix with an underscore.)
github_organisation=${github_organisation_original//'-'/'_'}
github_app=${github_app_original//'-'/'_'}

app_name=${app_details[0]}
app_generic_name=${app_details[1]}
app_comment=${app_details[2]}
app_description=${app_details[3]}
app_keywords=${app_details[4]}

# The namespace is calculated by removing spaces from the app name.
# As app names are capitalised by convention, this should lead to a namespace
# that conforms to Vala naming conventions on elementary OS.
app_namespace=$(echo "${app_name}" | sed s/[[:space:]]//g)

copyright_name=${copyright_details[0]}
copyright_email=${copyright_details[1]}

current_step=$(( current_step + 1 ))

# STEP 5: Perform substitutions.

# This is the list of files to carry out substituions in.
# These files are all in the template/ directory.
files=('com.github.ORG.APP.yml' 'meson.build' 'README.md' 'site/com.github.ORG.APP.flatpakref' 'site/index.html' 'site/README.md' 'src/Widgets/HeaderBar.vala' 'src/Application.vala' 'src/MainWindow.vala' 'data/APP.appdata.xml.in' 'data/APP.desktop.in' 'data/gresource.xml' 'data/gschema.xml' 'po/POTFILES' 'task/build' 'task/install' 'task/package' 'task/preview-in-appcenter' 'task/publish' 'task/run' 'task/run-package' 'task/take-screenshots' 'task/update-translations' '.github/workflows/main.yml' '.vscode/launch.json')

# Switch to the template directory and work inside a subshell.
(
cd template || exit

# Carry out substitutions in configuration files and source code.
for file in "${files[@]}"; do
  sed -i "s/{GITHUB.ORG.ORIGINAL}/${github_organisation_original}/g" "${file}"
  sed -i "s/{GITHUB.APP.ORIGINAL}/${github_app_original}/g" "${file}"
  sed -i "s/{GITHUB.ORG}/${github_organisation}/g" "${file}"
  sed -i "s/{GITHUB.APP}/${github_app}/g" "${file}"
  sed -i "s/{APP.NAMESPACE}/${app_namespace}/g" "${file}"
  sed -i "s/{APP.NAME}/${app_name}/g" "${file}"
  sed -i "s/{APP.GENERIC_NAME}/${app_generic_name}/g" "${file}"
  sed -i "s/{APP.DESCRIPTION}/${app_description}/g" "${file}"
  sed -i "s/{APP.COMMENT}/${app_comment}/g" "${file}"
  sed -i "s/{APP.CATEGORIES}/${app_categories}/g" "${file}"
  sed -i "s/{APP.KEYWORDS}/${app_keywords}/g" "${file}"
  sed -i "s/{COPYRIGHT.YEAR}/${copyright_year}/g" "${file}"
  sed -i "s/{COPYRIGHT.NAME}/${copyright_name}/g" "${file}"
  sed -i "s/{COPYRIGHT.EMAIL}/${copyright_email}/g" "${file}"
done

# Commit our changes (so we can always see a clean diff of the substitutions).
git add --all
git commit -m "Carry out template substitutions"


# STEP 6: Rename files.

mv com.github.ORG.APP.yml "com.github.${github_organisation}.${github_app}.yml"
mv data/APP.appdata.xml.in "data/${github_app}.appdata.xml.in"
mv data/APP.desktop.in "data/${github_app}.desktop.in"
mv site/com.github.ORG.APP.flatpakref "site/com.github.${github_organisation}.${github_app}.flatpakref"

# Switch back to the main directory, move all the files in the
# template directory to the main directory (overriding Watson’s
# own README, CHANGELOG, .gitignore, etc., in the process), and
# delete the now-empty template directory, thereby leaving the
# new app ready to be built in the next step.
)
# STEP 6 starts inside a subshell that does not preserve environment variables.
current_step=$(( current_step + 1 ))
mv template/site docs
mv template/* .
mv template/.vscode .
mv template/.github .
mv template/.editorconfig .
rm -r template

current_step=$(( current_step + 1 ))

# STEP 7: Configure, build and install.

task/install --create-translations

current_step=$(( current_step + 1 ))

# If this is a dry run (useful when developing/testing Watson itself),
# then display the git status and information on how to revert the changes,
# and exit without removing watson or replacing the git repository.
if ${dryRun}; then
  git status
  echo ''
  echo '⧼⧼⧼⧼⧼ Dry run: complete. ⧽⧽⧽⧽⧽'
  echo ''
  echo 'See changes:'
  echo 'git diff'
  echo ''
  echo 'Revert changes:'
  echo 'git reset --hard HEAD && git clean -d -f'
  exit
fi

# Step 8: Delete self (goodbye, cruel world!)

rm watson

current_step=$(( current_step + 1 ))

# Step 9: Commit and push changes.

git add --all
git commit -m "Finish customising app template"
git push

current_step=$(( current_step + 1 ))

# Step 10: Exit.

# That’s it! Goodbye :)
exit 0
